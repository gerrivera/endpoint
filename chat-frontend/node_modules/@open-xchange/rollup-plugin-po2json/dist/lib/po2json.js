import PO from 'pofile';
import { itemKey } from '../util/util.js';
function isFuzzy(item) {
    return !item.flags.fuzzy;
}
// test if translations are blank/empty
function hasTranslation(item) {
    return item.msgstr.join('').length > 0;
}
export function render(po, { includeFuzzy }) {
    const dict = {};
    for (const item of po.items) {
        if ((includeFuzzy || isFuzzy(item)) && !item.obsolete && hasTranslation(item)) {
            dict[itemKey(item)] = item.msgstr;
        }
    }
    return Object.assign({ headers: po.headers }, dict);
}
export function namespacesFrom(items) {
    const namespaces = new Set();
    for (const item of items) {
        for (const reference of item.references) {
            const matches = reference.match(/module:([^\s]+)/);
            if (matches) {
                namespaces.add(matches[1]);
            }
        }
    }
    return Array.from(namespaces);
}
export function parsePoFile(file) {
    return new Promise((resolve, reject) => {
        PO.load(file, (err, po) => err ? reject(err) : resolve(po));
    });
}
