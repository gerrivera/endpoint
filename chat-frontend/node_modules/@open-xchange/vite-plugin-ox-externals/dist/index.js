import { posix as path } from 'node:path';
import { parse } from 'es-module-lexer';
import MagicString from 'magic-string';
export const PROJECT_NAME = '@open-xchange/vite-plugin-ox-externals';
const escapeRegex = (string) => string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
export default function vitePluginOxExternals(options) {
    const resolvedOptions = {
        prefix: '$',
        ...options
    };
    const prefixRE = new RegExp(`^${escapeRegex(resolvedOptions.prefix)}\\/(.*?)(\\.js|\\.vue|)$`);
    let mode;
    const externalSet = new Set();
    const markExternal = (id) => externalSet.add(id);
    const isExternalModule = (id) => externalSet.has(id);
    const packageAliasMap = new Map();
    return {
        name: PROJECT_NAME,
        meta: resolvedOptions,
        enforce: 'pre',
        config(config, env) {
            mode = env.mode;
            if (mode === 'development') {
                const build = config.build ??= {};
                const rollupOptions = build.rollupOptions ??= {};
                rollupOptions.input = {};
            }
        },
        resolveId(id) {
            const match = id.match(prefixRE);
            if (!match)
                return packageAliasMap.get(id);
            const fileExtension = id.includes('.vue') ? 'vue' : 'js';
            const newId = mode === 'development' ? `/${match[1]}.${fileExtension}` : `${match[1]}.${fileExtension}`;
            markExternal(newId);
            return { id: newId, external: true };
        },
        load(id) {
            return isExternalModule(id) ? '' : null;
        },
        generateBundle(_options, bundle) {
            for (const file in bundle) {
                const chunk = bundle[file];
                if (chunk.type === 'chunk') {
                    // early exit, if not external module is detected
                    const hasExternals = chunk.imports.some(isExternalModule) || chunk.dynamicImports.some(isExternalModule);
                    if (!hasExternals)
                        continue;
                    const s = new MagicString(chunk.code);
                    const [imports] = parse(chunk.code);
                    for (const { s: start, e: end } of imports) {
                        // need to extract this, at it might contain quotes or not
                        const name = chunk.code.substring(start, end);
                        const matches = name.match(/(["'`]?)([^"'`]*)(["'`]?)/);
                        if (!matches)
                            continue;
                        const [, pre, match, post] = matches;
                        if (!isExternalModule(match))
                            continue;
                        const relativePath = path.relative(path.dirname(`/${chunk.fileName}`), `/${match}`);
                        s.overwrite(start, end, `${pre}${relativePath}${post}`);
                    }
                    chunk.code = s.toString();
                }
            }
        }
    };
}
