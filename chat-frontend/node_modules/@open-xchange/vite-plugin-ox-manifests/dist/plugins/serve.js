import path, { posix } from 'node:path';
import parseurl from 'parseurl';
import chokidar from 'chokidar';
import { definePlugin } from './plugin.js';
import { PROJECT_NAME } from '../util.js';
function sendJSON(res, data) {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'application/json');
    res.write(JSON.stringify(data));
    return res.end();
}
export default definePlugin(({ watch }) => {
    let resolvedConfig;
    let resolvedPlugin;
    let manifestRegex;
    let depsRegex;
    return {
        name: `${PROJECT_NAME}/serve-plugin`,
        pluginResolved(plugin) {
            resolvedPlugin = plugin;
        },
        configResolved(config) {
            resolvedConfig = config;
            manifestRegex = new RegExp(`^${config.base}(api/manifest.json|manifests)$`);
            depsRegex = new RegExp(`^${config.base}(api/deps.json|dependencies)$`);
        },
        configureServer({ ws, middlewares, moduleGraph }) {
            function addTimestamp(manifests) {
                for (const manifest of manifests) {
                    // TODO what about other file types?
                    const id = `${resolvedConfig.root}/${manifest.path}.js`;
                    const moduleNode = moduleGraph.idToModuleMap.get(id);
                    const hmrTS = moduleNode?.lastHMRTimestamp;
                    if (hmrTS)
                        manifest.raw = posix.join(resolvedConfig.base, `/${manifest.path}.js?t=${hmrTS}`);
                }
            }
            middlewares.use((req, res, next) => {
                if (req.method !== 'GET')
                    return next();
                const url = parseurl(req);
                if (!url?.path)
                    return next();
                if (manifestRegex.test(url.path)) {
                    resolvedPlugin.getManifests().then(manifests => {
                        addTimestamp(manifests);
                        sendJSON(res, manifests);
                    }, next);
                    return;
                }
                if (depsRegex.test(url.path)) {
                    return sendJSON(res, {});
                }
                next();
            });
            if (watch) {
                const watcher = chokidar.watch(path.join(resolvedConfig.root, '**/manifest.json'))
                    .on('ready', () => {
                    watcher.on('all', path => {
                        if (typeof path !== 'string')
                            return;
                        ws.send({ type: 'full-reload', path });
                    });
                });
            }
        }
    };
});
